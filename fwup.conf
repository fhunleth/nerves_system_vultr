# Firmware configuration file for a Vultr Server Image

# Default paths if not specified via the commandline
define(ROOTFS, "${NERVES_SYSTEM}/images/rootfs.squashfs")

# This configuration file will create an image that
# has an MBR and the following 3 partitions:
#
# +----------------------------+
# | MBR                        |
# +----------------------------+
# | Boot partition (FAT32)     |
# | /boot/grub/grub.cfg        |
# | /boot/grub/grubenv         |
# +----------------------------+
# | p2: Rootfs A (squashfs)   |
# +----------------------------+
# | p3: Rootfs B (squashfs)   |
# +----------------------------+
# | p4: Application (ext4)     |
# +----------------------------+

# The boot partition contains the bootloader configuration
# and any server provisioning information. 16 MB should be
# plenty for now.
define(BOOT_PART_OFFSET, 2048)
define(BOOT_PART_COUNT, 31232)

# Let the rootfs have room to grow up to 128 MiB
define-eval(ROOTFS_A_PART_OFFSET, "${BOOT_PART_OFFSET} + ${BOOT_PART_COUNT}")
define(ROOTFS_A_PART_COUNT, 262144)
define-eval(ROOTFS_B_PART_OFFSET, "${ROOTFS_A_PART_OFFSET} + ${ROOTFS_A_PART_COUNT}")
define(ROOTFS_B_PART_COUNT, ${ROOTFS_A_PART_COUNT})

# Application data partition (10 GiB). This can be enlarged
# to fill the entire volume.
define-eval(APP_PART_OFFSET, "${ROOTFS_B_PART_OFFSET} + ${ROOTFS_B_PART_COUNT}")
define(APP_PART_COUNT, 20971520)

# Firmware metadata
meta-product = "Nerves Vultr Image"
meta-description = ""
meta-version = ${NERVES_SDK_VERSION}
meta-platform = "vultr"
meta-architecture = "x86_64"
meta-author = "Frank Hunleth"

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource grub.img {
    host-path = "${NERVES_SYSTEM}/images/grub.img"
}
file-resource grub.cfg {
    host-path = "${NERVES_SYSTEM}/images/grub.cfg"
}

# Order the rootfs image before the grub environment resources
# so that the grub environment blobs get written last. This
# is in case the user aborts the programming midway.
file-resource rootfs.img {
    host-path = ${ROOTFS}
}
file-resource grubenv_a_valid {
    host-path = "${NERVES_SYSTEM}/images/grubenv_a_valid"
}
file-resource grubenv_a {
    host-path = "${NERVES_SYSTEM}/images/grubenv_a"
}
file-resource grubenv_b {
    host-path = "${NERVES_SYSTEM}/images/grubenv_b"
}
file-resource bzImage {
    host-path = "${NERVES_SYSTEM}/images/bzImage"
}

mbr mbr {
    bootstrap-code-host-path = "${HOST_DIR}/usr/lib/grub/i386-pc/boot.img"
    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 3 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0x83 # Linux
    }
}

# This firmware task writes everything to the destination media.
# This should only be run for the first installation.
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    on-init {
        mbr_write(mbr)
        fat_mkfs(${BOOT_PART_OFFSET}, ${BOOT_PART_COUNT})
        fat_mkdir(${BOOT_PART_OFFSET}, "/boot")
        fat_mkdir(${BOOT_PART_OFFSET}, "/boot/grub")
    }

    on-resource grub.img { raw_write(1) }
    on-resource grub.cfg { fat_write(${BOOT_PART_OFFSET}, "/boot/grub/grub.cfg") }
    on-resource grubenv_a_valid { fat_write(${BOOT_PART_OFFSET}, "/boot/grub/grubenv") }
    on-resource bzImage { fat_write(${BOOT_PART_OFFSET}, "/boot/bzImage") }
    on-resource rootfs.img {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Invalidate the app data partition and B partitions just
        # in case something was on the SSD.
        raw_memset(${APP_PART_OFFSET}, 8, 0xff)
        raw_memset(${ROOTFS_B_PART_OFFSET}, 8, 0xff)
    }
}

task upgrade.a {
    # This task upgrades the A partition, so make sure we're running
    # on B.
    require-path-on-device("/", "/dev/vda3")

    on-init {
    }

    on-resource rootfs.img {
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    # Key step to switching over the A partition
    on-resource grubenv_a {
        fat_write(${BOOT_PART_OFFSET}, "/boot/grub/grubenv")
    }

    on-finish {
    }
}

task upgrade.b {
    # This task upgrades the B partition, so make sure we're running
    # on A.
    require-path-on-device("/", "/dev/vda2")

    on-init {
    }

    on-resource rootfs.img {
        raw_write(${ROOTFS_B_PART_OFFSET})
    }

    # Key step to switching over the B partition
    on-resource grubenv_b {
        fat_write(${BOOT_PART_OFFSET}, "/boot/grub/grubenv")
    }

    on-finish {
    }
}

task upgrade.wrong {
    on-init {
        error("Please check that the rootfs is on /dev/vdaX")
    }
}
